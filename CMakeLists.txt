cmake_minimum_required(VERSION 3.10)

if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
    CACHE STRING "")
endif()
message(STATUS "CMAKE_EXPORT_COMPILE_COMMANDS: ${CMAKE_EXPORT_COMPILE_COMMANDS}")

project(LeetCode CXX)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENTIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)

if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /WX  /permissive-")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic -Werror")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic -Werror")
endif()

find_package(Catch2 CONFIG REQUIRED)

function(add_problem name)
    add_executable(${name} src/${name}.cpp)
    target_link_libraries(${name} PRIVATE Catch2::Catch2)
endfunction(add_problem)

add_problem(0000-leet-code)
add_problem(0001-two-sum)
add_problem(0002-add-two-numbers)
add_problem(0003-longest-substring-without-repeating-characters)
add_problem(0004-median-of-two-sorted-arrays)
add_problem(0007-reverse-integer)
add_problem(0009-palindrome-number)
add_problem(0012-integer-to-roman)
add_problem(0013-roman-to-integer)
add_problem(0014-longest-common-prefix)
add_problem(0020-valid-parentheses)
add_problem(0021-merge-two-sorted-lists)